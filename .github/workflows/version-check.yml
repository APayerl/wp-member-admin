name: Version Check

on:
  # K√∂r p√• PR:s FR√ÖN vilken branch som helst TILL master eller develop
  pull_request:
    branches: [ master, develop ]
  # K√∂r p√• pushes till develop (master hanteras av release-workflow)
  push:
    branches: [ develop ]

jobs:
  check-version:
    name: Check Development Version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout kod
      uses: actions/checkout@v4
      
    - name: Kontrollera att utvecklingsversionen √§r 1.0.0
      run: |
        echo "üîç Kontrollerar att utvecklingsversionen √§r 1.0.0..."
        
        # H√§mta versionerna fr√•n b√•da st√§llena
        HEADER_VERSION=$(grep "\* Version:" member-admin.php | sed 's/.*Version: //')
        CONST_VERSION=$(grep "MEMBER_ADMIN_VERSION" member-admin.php | sed "s/.*MEMBER_ADMIN_VERSION', '//" | sed "s/');.*//")
        
        echo "üìã Plugin header version: $HEADER_VERSION"
        echo "üìã PHP konstant version: $CONST_VERSION"
        
        # Kontrollera att plugin header √§r 1.0.0
        if [ "$HEADER_VERSION" != "1.0.0" ]; then
          echo "‚ùå Plugin header Version ska vara '1.0.0' i utvecklingsversionen"
          echo "Hittade: $HEADER_VERSION"
          exit 1
        fi
        
        # Kontrollera att PHP konstant √§r 1.0.0
        if [ "$CONST_VERSION" != "1.0.0" ]; then
          echo "‚ùå MEMBER_ADMIN_VERSION ska vara '1.0.0' i utvecklingsversionen"
          echo "Hittade: $CONST_VERSION"
          exit 1
        fi
        
        # Kontrollera att de matchar varandra
        if [ "$HEADER_VERSION" != "$CONST_VERSION" ]; then
          echo "‚ùå VERSIONSKONFLIK: Plugin header ($HEADER_VERSION) matchar inte PHP konstant ($CONST_VERSION)"
          exit 1
        fi
        
        echo "‚úÖ Utvecklingsversionen √§r korrekt satt till 1.0.0 p√• b√•da st√§llena"
        
    - name: H√§mta senaste tag f√∂r validering
      id: latest_tag
      uses: WyriHaximus/github-action-get-previous-tag@v1
      continue-on-error: true
      with:
        fallback: '1.0.0'
        
    - name: Validera semver-format i taggar
      run: |
        # Om detta √§r en push till develop, kontrollera inte taggar
        if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "‚úÖ Skippar tag-validering f√∂r develop branch"
          exit 0
        fi
        
        # Kontrollera senaste taggen om den finns
        if [ "${{ steps.latest_tag.outputs.tag }}" != "1.0.0" ]; then
          TAG="${{ steps.latest_tag.outputs.tag }}"
          
          # Kontrollera att taggen inte har v-prefix
          if echo "$TAG" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$"; then
            echo "‚ùå Tag '$TAG' har v-prefix, ska vara utan (ex: 1.0.1 ist√§llet f√∂r v1.0.1)"
            exit 1
          fi
          
          # Kontrollera att taggen f√∂ljer semver
          if ! echo "$TAG" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+$"; then
            echo "‚ùå Tag '$TAG' f√∂ljer inte semver-format (major.minor.patch)"
            exit 1
          fi
          
          echo "‚úÖ Tag '$TAG' f√∂ljer korrekt format"
        else
          echo "‚úÖ Inga taggar att validera √§n"
        fi 